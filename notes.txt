#types of components
    1. function based
            const App = () => {
                return <div>
                    <SearchBar />
                </div>;
            };
    2. class based
            class App2 extends React.Component{
                render() {
                    return <div>Hi from app2 !</div>
                }
            };

#state in react
    only in class based components
    state is a plain JS object that is use to record the user events in react.
    Each class based component that we define has its own state object.
    Whenever a component's state is changed, the component immediately re-renders and also forces all of its children component to re-render.

    To use state, we need to initialise it inside the constructor method of class

    class App2 extends React.Component{
        constructor(props){
            super(props);       //calling method of a parent class

            this.state = { term : '' };
        }
        render() {
            return (
                <div>Hi from app2 !</div>
                <input value={this.state.term} />       //this makes the input field read only
                <input onChange={event => this.setState({term : event.target.value})} />        //set input value to user defined value
            )
        }
    };

    constructor function is called very first whenever any new instance of class is created

    1. To set state
        if we want to set state outside of a constructor function, we need to use
        eg. this.setState({term: e.target.value});

# Downwards data flow in react
    Our parent component is solely responsible for fetching data, be it from API or anything

# ES6 feature
    YTsearch({key: API_KEY, term: 'bmw'}, (videos) => {
        //when key and value have the same name, then we can condense them to one variable only
        this.setState({videos}); <equivalent to> this.setState({videos : data});
    });

# set CSS in components
    To set css using class in JSX, we use keyword className instead of class.

#REDUX
    It is a predictable state container for JS applications
